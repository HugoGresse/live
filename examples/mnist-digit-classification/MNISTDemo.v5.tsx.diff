@@ -4,6 +4,7 @@
   Canvas,
   CanvasRenderingContext2D,
   Image,
+  ImageUtil,
   MobileModel,
 } from 'react-native-pytorch-core';
 import {useSafeAreaInsets} from 'react-native-safe-area-context';
@@ -54,6 +55,48 @@
   };
 }
 
+/**
+ * The React hook provides MNIST inference using the image data extracted from
+ * a canvas.
+ *
+ * @param canvasSize The size of the square canvas
+ */
+function useMNISTCanvasInference(canvasSize: number) {
+  const [result, setResult] = useState<MNISTResult[]>();
+  const {processImage} = useMNISTModel();
+  const classify = useCallback(
+    async (ctx: CanvasRenderingContext2D) => {
+      // Return immediately if canvas is size 0
+      if (canvasSize === 0) {
+        return null;
+      }
+
+      // Get image data center crop
+      const imageData = await ctx.getImageData(0, 0, canvasSize, canvasSize);
+
+      // Convert image data to image.
+      const image: Image = await ImageUtil.fromImageData(imageData);
+
+      // Release image data to free memory
+      imageData.release();
+
+      // Run MNIST inference on the image
+      const result = await processImage(image);
+
+      // Release image to free memory
+      image.release();
+
+      // Set result state to force re-render of component that uses this hook
+      setResult(result);
+    },
+    [canvasSize, processImage, setResult],
+  );
+  return {
+    result,
+    classify,
+  };
+}
+
 export default function MNISTDemo() {
   // Get safe area insets to account for notches, etc.
   const insets = useSafeAreaInsets();
