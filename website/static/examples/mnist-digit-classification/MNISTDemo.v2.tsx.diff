@@ -1,26 +1,88 @@
-import React, {useCallback, useEffect, useState} from 'react';
+import React, {useCallback, useEffect, useState, useRef} from 'react';
 import {StyleSheet, Text, View} from 'react-native';
 import {Canvas, CanvasRenderingContext2D} from 'react-native-pytorch-core';
 import {useSafeAreaInsets} from 'react-native-safe-area-context';
 
 const COLOR_CANVAS_BACKGROUND = '#4F25C6';
+const COLOR_TRAIL_STROKE = '#FFFFFF';
+
+type TrailPoint = {
+  x: number;
+  y: number;
+};
 
 export default function MNISTDemo() {
   // Get safe area insets to account for notches, etc.
   const insets = useSafeAreaInsets();
   const [canvasSize, setCanvasSize] = useState<number>(0);
+
   // `ctx` is drawing context to draw shapes
   const [ctx, setCtx] = useState<CanvasRenderingContext2D>();
 
+  const trailRef = useRef<TrailPoint[]>([]);
+  const [drawingDone, setDrawingDone] = useState(false);
+
   const draw = useCallback(() => {
     if (ctx != null) {
-      // fill background by drawing a rect
-      ctx.fillStyle = COLOR_CANVAS_BACKGROUND;
-      ctx.fillRect(0, 0, canvasSize, canvasSize);
+      const trail = trailRef.current;
+      if (trail != null) {
+        // fill background by drawing a rect
+        ctx.fillStyle = COLOR_CANVAS_BACKGROUND;
+        ctx.fillRect(0, 0, canvasSize, canvasSize);
+
+        // Draw the trail
+
+        if (trail.length > 0) {
+          ctx.strokeStyle = COLOR_TRAIL_STROKE;
+          ctx.lineWidth = 25;
+          ctx.lineJoin = 'round';
+          ctx.lineCap = 'round';
+          ctx.miterLimit = 1;
+          ctx.beginPath();
+          ctx.moveTo(trail[0].x, trail[0].y);
+          for (let i = 1; i < trail.length; i++) {
+            ctx.lineTo(trail[i].x, trail[i].y);
+          }
+          ctx.stroke();
+        }
 
-      ctx.invalidate();
+        ctx.invalidate();
+      }
     }
-  }, [ctx, canvasSize]);
+  }, [ctx, canvasSize, trailRef]);
+
+  // handlers for touch events
+  const handleMove = useCallback(
+    async event => {
+      const position: TrailPoint = {
+        x: event.nativeEvent.locationX,
+        y: event.nativeEvent.locationY,
+      };
+      const trail = trailRef.current;
+      if (trail.length > 0) {
+        const lastPosition = trail[trail.length - 1];
+        const dx = position.x - lastPosition.x;
+        const dy = position.y - lastPosition.y;
+        // add a point to trail if distance from last point > 5
+        if (dx * dx + dy * dy > 25) {
+          trail.push(position);
+        }
+      } else {
+        trail.push(position);
+      }
+      draw();
+    },
+    [trailRef, draw],
+  );
+
+  const handleStart = useCallback(() => {
+    setDrawingDone(false);
+    trailRef.current = [];
+  }, [trailRef, setDrawingDone]);
+
+  const handleEnd = useCallback(() => {
+    setDrawingDone(true);
+  }, [setDrawingDone]);
 
   useEffect(() => {
     draw();
@@ -35,7 +97,9 @@
       }}>
       <View style={[styles.instruction, {marginTop: insets.top}]}>
         <Text style={styles.label}>Write a number</Text>
-        <Text style={styles.label}>Let's test the MNIST model</Text>
+        <Text style={styles.label}>
+          Let's see if the AI model will get it right
+        </Text>
       </View>
       <Canvas
         style={{
@@ -43,15 +107,20 @@
           width: canvasSize,
         }}
         onContext2D={setCtx}
+        onTouchMove={handleMove}
+        onTouchStart={handleStart}
+        onTouchEnd={handleEnd}
       />
-      <View style={[styles.resultView]} pointerEvents="none">
-        <Text style={[styles.label, styles.secondary]}>
-          Highest confidence will go here
-        </Text>
-        <Text style={[styles.label, styles.secondary]}>
-          Second highest will go here
-        </Text>
-      </View>
+      {drawingDone && (
+        <View style={[styles.resultView]} pointerEvents="none">
+          <Text style={[styles.label, styles.secondary]}>
+            Highest confidence will go here
+          </Text>
+          <Text style={[styles.label, styles.secondary]}>
+            Second highest will go here
+          </Text>
+        </View>
+      )}
     </View>
   );
 }
