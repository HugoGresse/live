@@ -1,6 +1,11 @@
 import React, {useCallback, useEffect, useState, useRef} from 'react';
 import {StyleSheet, Text, View} from 'react-native';
-import {Canvas, CanvasRenderingContext2D} from 'react-native-pytorch-core';
+import {
+  Canvas,
+  CanvasRenderingContext2D,
+  Image,
+  MobileModel,
+} from 'react-native-pytorch-core';
 import {useSafeAreaInsets} from 'react-native-safe-area-context';
 
 const COLOR_CANVAS_BACKGROUND = '#4F25C6';
@@ -11,6 +16,44 @@
   y: number;
 };
 
+// This is the custom model you have trained. See the tutorial for more on preparing a PyTorch model for mobile.
+const mnistModel = require('../../models/mnist.ptl');
+
+type MNISTResult = {
+  num: number;
+  score: number;
+};
+
+/**
+ * The React hook provides MNIST model inference on an input image.
+ */
+function useMNISTModel() {
+  const processImage = useCallback(async (image: Image) => {
+    // Runs model inference on input image
+    const {
+      result: {scores},
+    } = await MobileModel.execute<{scores: number[]}>(mnistModel, {
+      image,
+      crop_width: 1,
+      crop_height: 1,
+      scale_width: 28,
+      scale_height: 28,
+      colorBackground: COLOR_CANVAS_BACKGROUND,
+      colorForeground: COLOR_TRAIL_STROKE,
+    });
+
+    // Get the score of each number (index), and sort the array by the most likely first.
+    const sortedScore: MNISTResult[] = scores
+      .map((score, index) => ({score: score, num: index}))
+      .sort((a, b) => b.score - a.score);
+    return sortedScore;
+  }, []);
+
+  return {
+    processImage,
+  };
+}
+
 export default function MNISTDemo() {
   // Get safe area insets to account for notches, etc.
   const insets = useSafeAreaInsets();
